/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.netbeansrcp.taskeditor;

import com.netbeansrcp.taskmodel.api.Task;
import com.netbeansrcp.taskmodel.api.TaskManager;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//com.netbeansrcp.taskeditor//TaskEditor//EN",
autostore = false)
@TopComponent.Description(preferredID = "TaskEditorTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "com.netbeansrcp.taskeditor.TaskEditorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_TaskEditorAction",
preferredID = "TaskEditorTopComponent")
public final class TaskEditorTopComponent extends TopComponent {

    private InstanceContent ic = new InstanceContent();
    private PropertyChangeListener taskChangeListener = new ListenForTaskChanges();
    private static Map<Task, TaskEditorTopComponent> tcByTask = new HashMap<Task, TaskEditorTopComponent>();
    private static TaskManager taskMgr;

    private class ListenForTaskChanges implements PropertyChangeListener {

        public ListenForTaskChanges() {
        }

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            if (TaskEditorPanel.PROP_TASK.equals(evt.getPropertyName())) {
                List newContent = new ArrayList();
                newContent.add(taskEditorPanel1.task);
                ic.set(newContent, null);
            }
        }
    }

    public TaskEditorTopComponent() {
        this(Lookup.getDefault().lookup(TaskManager.class));
    }

    private TaskEditorTopComponent(TaskManager taskMgr) {
        this(taskMgr != null ? taskMgr.createTask().getLookup().lookup(Task.class) : null);
    }

    private TaskEditorTopComponent(Task task) {
        initComponents();
        taskEditorPanel1.updateTask(task);
        taskEditorPanel1.addPropertyChangeListener(taskChangeListener);
        ic.add(taskEditorPanel1.task);
        associateLookup(new AbstractLookup(ic));
        setName(NbBundle.getMessage(TaskEditorTopComponent.class, "CTL_TaskEditorTopComponent"));
        setToolTipText(NbBundle.getMessage(TaskEditorTopComponent.class, "HINT_TaskEditorTopComponent"));
//        associateLookup(Lookups.singleton(((TaskEditorPanel) taskEditorPanel1).task));
        tcByTask.put(task, this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        taskEditorPanel1 = new com.netbeansrcp.taskeditor.TaskEditorPanel();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(taskEditorPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(taskEditorPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
        );
    }// </editor-fold>                        
    // Variables declaration - do not modify                     
    private com.netbeansrcp.taskeditor.TaskEditorPanel taskEditorPanel1;
    // End of variables declaration                   

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    public static TaskEditorTopComponent findInstance(Task task) {
        TaskEditorTopComponent tc = tcByTask.get(task);
        if (tc == null) {
            tc = new TaskEditorTopComponent(task);
        }
        if (taskMgr == null) {
            taskMgr = Lookup.getDefault().lookup(TaskManager.class);
            taskMgr.addPropertyChangeListener(new ListenForRemovedNodes());
        }
        return tc;
    }

    private static class ListenForRemovedNodes implements PropertyChangeListener {

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            if (TaskManager.PROP_TASKLIST_REMOVE.equals(evt.getPropertyName())) {
                Task task = (Task) evt.getNewValue();
                TaskEditorTopComponent tc = tcByTask.get(task);
                if (tc != null) {
                    tc.close();
                    tcByTask.remove(task);
                }

            }
        }
    }

    public String getTaskId() {
        Task task = taskEditorPanel1.task;
        return task == null ? "" : task.getId();
    }
}
 
